{
    "YearData": {
        "2019": [
            "I created my 2019 projects on the platform ROBLOX, using the programming language Lua.",
            "I was the lead programmer of Swordlink, a sword-fighting game in which users competed against each other in various game modes to earn gold and tickets. I was responsible for modularizing and organizing the code so that various components can be reused. In addition, I had to brainstorm several algorithms to handle item storage, purchasing items, trading items, and daily awards. Finally, I had to apply many error handling techniques to ensure that the game was bug-free. This game me a lot of experience with object-oriented design and ensuring that my program is scalable for a large player base.",
            "Furthermore, I was also the lead developer of Goldcrest, a story-based, medieval ROBLOX game in which players worked together to complete various \"chapters\". I organized the chapters into their own respective \"levels\". I had to develop the logic and design for item storage, the chapter queues, crate/pet purchasing, and NPC/Mob instantiation. Similarly to Swordlink, I used an object-oriented design pattern to allow for scalability.",
            "Finally, I worked on various smaller projects, such as an object-oriented dueling system."
        ],
        "2020": [
            "In 2020, I enrolled at Ursinus College and took MATH-112: Calculus 2 and CS-174: Object-Oriented Programming with Dr. Tralie. This course used Java and C++. Due to my past experience with OOP, I blew through this course and scored an A+.",
            "Despite my familiarity with the concepts, a few of the CS-174 assignments were especially challenging. A few notable assignments were the Markov Mashups and Shazam assignments.",
            "The Markov Mashups java assignment was my gateway to Machine Learning. In this assignment, I had to pull out all the k-grams from a text file and use information about the different first characters of the second word of repeated k-grams to synthesize new sentences. In addition, I had to then use this algorithm to classify the text file as a certain category, such as a positive or negative review.",
            "In the Shazam C++ assignment, I built audio fingerprints from a collection of songs to identify songs from short audio clips. To do this, I pulled audio data (frequency) from a spectogram of the audio clip. I detected \"anchor points\", the brightest parts of the spectogram and then grouped anchors together to capture the temporal evolution of the audio. After computing the finger prints, I matched them to songs in the database, choosing the song that best represents the audio clip."            
        ],
        "2021S": [
            "In the Spring of 2021, I took CS-371: Data Structures and Algorithms in 2021 with Dr. Tralie. This was a rigorous course that emphasized efficient and scalable algorithm design and applications. Three notable assignments from this course were the Plant Cell Segmentation, Dynamic Time Warping, and Phylogenetic Tree assignments.",
            "In the plant cell segmentation assignment, I used a watershed algorithm to detect the centers of plant cells. To do this, I grouped pixels in the union find data structure based on a brightness threshold. From there, I took an average of all the x and y position values for each cell to find their respective centers.",
            "I practiced a lot of dynamic programming with the Dynamic Time Warping assignment. In this assignment, I had to use dynamic programming to choose an optimal warping path to align an audio clip with its corresponding cover audio clip.",
            "Additionally, in the Phylogenetic trees assignment, I used the Needleman-Wunsch algorithm to determine the similarity between two species' DNA sequences. Following that, I used this similarity data, a single-linkage clustering algorithm, and the union find data structure to build a Phylogenetic tree.",
            "Finally, for my final project in algorithms, I designed an application that computes the 3D convex hull of a set of 2D convex points. To do this, I had to perform a \"Geometric Lift\" on a 2D set of points using a convex function. From there, I constructed the faces of the 3D convex hull by using the fact that all the points need to be on one side of each face. Here is a link to the demo: https://wg-convex-hull.glitch.me"
        ],
        "2021F": [
            "In the Fall of 2021, I took CS-373: Theory of Computation, CS-377: Database Design, MATH-211: Calculus 3, and MATH-235: Linear Algebra.",
            "Theory of Computation taught me about finite state machines, language decidability, Turing machines, context-free languages, language regularity, and NP-complete problems. For my final project, I wrote a Java program that reduces the K-Clique graph problem to the Satisfiability problem. This reduction works because the K-Clique problem is NP-Complete, and the Satisfiability problem is NP-Hard.",
            "In Database Design, I learned about entity-relational models, table normalization, SQL joins and aggregation, RESTful web services, and NoSQL databases. My final project comprised of a DAO (Data Access Object) model for Halo Infinite tournament data. I created a database schema with normalized tables and fetched certain data about Halo players and teams using SQL joins and aggregate queries."
        ]
    }
}